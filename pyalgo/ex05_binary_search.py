# 이분 탐색
"""
자료가 크기 순서대로 정렬된 리스트에서 틀정한 값이 있는지
찾아 그 위치를 돌려주는 알고리즘

☆ 탐 색 과 정 ☆
1. 중간값 위치를 찾는다.
2. 찾는 값과 중간 위치값을 비교한다.
3. 찾는 값이 중간 위치 값보다 크면 중간 위치의 오른쪽을 대상으로
   탐색하고, 작으면 왼쪽을 대상으로 탐색한다.
"""
import random


def bin_search(a, x):  # a리스트와 x (찾는값)
    start = 0
    end = len(a) - 1  # 마지막 인덱스 번호

    while start <= end:  # 탐색할 범위가 있는 동안 계속 반복
        mid = (start + end) // 2  # 탐색범위 중간위치 '//'는 몫 구하는 법

        if x == a[mid]:
            return mid  # 위치값 찾음
        elif x > a[mid]:  # 찾는값이 중간값 보다 크면
            start = mid + 1  # 오른쪽 범위를 좁혀 계속 탐색
        else: # 찾는값이 중간값 보다 작으면
            end = mid - 1 # 왼쪽 범위 탐색
    return -1

# d = [1, 4, 9, 16, 25, 36, 49, 64, 81]
d=[9, 4, 1, 36, 25, 16, 81,64,49]

d.sort()
d.reverse()
print(d)

print( bin_search(d, 49) )

""""
찾는값이 36인경우
1. mid = (0+8)/2 , a[4]=25 중간 위치값
2. 36>25 25의 오늘쪽 점위
3. mid=(5+8)//2=6 a[6]=49찾음
4. 36<49 의 왼쪽
5. 36 1개 이므로 찾음 
"""
